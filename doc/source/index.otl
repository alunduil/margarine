[_] 2% Cloud Application Architect's Handbook
	[_] 0% Introduction
		: The purpose and goal of this documentation
	[_] Epigraph
		: A phrase, quotation, or poem at the beginning of a document or
		: component.  Typically, a preface, summary, counter-example, or link to a
		: larger work or literary canon.
	[_] 10% Prologue
		: Opening story that sets the stage and gives background.  Often an
		: earlier story that ties into the story we're telling and other
		: miscellaneous but relevant information.
		[_] Margarine Overview
		[_] 40% How to Contribute to Margarine
			[_] % Communication
				[_] % Mailing list: margarine-dev@googlegroups.com
					[_] Subscribe via margarine-dev+subscribe@googlegroups.com
				[_] IRC: irc://irc.freenode.net#margarine
			[_] 40% Basics
				[X] Create a Github Account
				[X] Fork margarine (https://github.com/raxsavvy/margarine)
				[_] Clone margarine `git clone ${URI}`
				[_] Add 'upstream' remote to your repository: `git remote add upstream https://github.com/raxsavvy/margarine.git`
			[_] % Work Process
				[_] % Branching Strategy
					[_] % Issues
						: When working an issue the following process should be followed:
						[_] Pick an issue from https://github.com/raxsavvy/margarine/issues
						[_] Create a branch named issues/N, where N is the number for the issue chosen
						[_] % Make appropriate code changes including the following concerns:
							[_] Coding Style (see margarine coding style)
							[_] Implement any appropriate tests (TDD-ISH)
						[_] Submit pull request for merge into master
						[_] If changes to pull request are required, make them in the created branch
		[_] Margarine URLs
		[_] Margarine Components
	[_] 2% Part 0—Cloud Fundamentals
		[_] 0% What is Cloud?
			[_] 0% A New Infrastructure
				[_] High Availability Changes
			[_] 0% NIST
				[_] 0% Essential Characteristics
					[_] 0% On-demand Self-Service
						: A consumer can unilaterally provision computing capabilities,
						: such as server time and network storage, as needed automatically
						: without requiring human interaction with each service provider.
						[_] API
						[_] Control Panel
					[_] Broad Network Access
						: Capabilities are available over the network and accessed through
						: standard mechanisms that promote use by heterogeneous thin or
						: thick client platforms (e.g., mobile phones, tablets, laptops,
						: and workstations).
					[_] Resource Pooling
						: The provider's computing resources are pooled to serve multiple
						: consumers using a multi-tenant model, with different physical
						: and virtual resources dynamically assigned and reassigned
						: according to consumer demand.  There is a sense of location
						: independence in that the customer generally has no control or
						: knowledge over the exact location of the provided resources but
						: may be able to specify location at a higher level of abstraction
						: (e.g., country, state, or datacenter).  Examples of resources
						: include storage, processing, memory, and network bandwidth.
					[_] Rapid Elasticity
						: Capabilities can be elastically provisioned and released, in
						: some cases automatically, to scale rapidly outward and inward
						: commensurate with demand.  To the consumer, the capabilities
						: available for provisioning often appear to be unlimited and can
						: be appropriated in any quantity at any time.
					[_] Measured Service
						: Cloud systems automatically control and optimize resource use by
						: leveraging a metering capability at some level of abstraction
						: appropriate to the type of service (e.g., storage, processing,
						: bandwidth, and active user accounts).  Resource usage can be
						: monitored, controlled, and reported, providing transparency for
						: both the provider and consumer of the utilized service.
				[_] 0% Service Models
					[_] Software as a Service
					[_] Platform as a Service
					[_] Infrastructure as a Service
				[_] 0% Deployment Models
					[_] Private Cloud
					[_] Community Cloud
					[_] Public Cloud
					[_] Hybrid Cloud
		[_] 7% Virtualization
			[_] What is Virtualization?
				: Virtualization is the process by which computational resources are
				: allocated to tenants such that they can be reassigned as necessary.
				: This is the current and simplest technology for meeting the resource
				: pooling requirement of cloud computing put forth by NIST.
			[_] 0% Virtual Machine
				[_] Instance
				[_] Guest Image
			[_] 21% Hypervisor
				[_] 0% Management Interfaces
					[_] libvirt
					[_] xapi
				[_] 38% Xen
					[X] 100% Commercial Backing
						[X] Citrix
					[_] 0% Architecture
						[_] Dom0
						[_] DomU
						[_] Hypercalls
					[_] 16% Networking
						[_] Management: xen-vnif
						[_] 33% Networking Stack
							[_] What is this networking stack?
							[X] DVSC (Distributed Virtual Switch Controller)
							[_] Open vSwitch
				[_] KVM (Mention QEMU?)
					[_] History including QEMU roots
					[X] 100% Commercial Backing
						[X] Red Hat
					[_] 0% Architecture
						[_] virtio
					[_] 0% Networking
						[_] Management: virtio
						[_] 0% Networking Stack
							[_] What is this networking stack?
							[_] Bridged Interfaces
		[_] 0% Orchestration
			[_] What is Orchestration?
				: Orchestration is the act of managing or controlling multiple
				: hypervisors to create a dynamic infrastructure built on top of
				: classic server hardware.  Orchestration enables two other components
				: of the NIST cloud definition: rapid elasticity and possibly measured
				: service.
			[_] 0% Openstack
				[_] 0% Projects
					[_] Cells
					[_] Cinder
					[_] Flavor
					[_] Glance
					[_] Keystone
					[_] Lunr
					[_] Nova
					[_] Neutron
				[_] 0% Command Line Tools
					[_] novaclient
	[_] 0% Part 1—Developing Cloud Applications
		[_] 0% How to Design a Cloud Application
		[_] 0% How to Implement a Cloud Application
		[_] 0% How to Test a Cloud Application
			[_] 0% Software Testing
				[_] 0% Strategies
					[_] Black Box
					[_] White Box
					[_] Automated
					[_] Manual
				[_] 0% Methodologies
					[_] Unit Tests
					[_] Integration Tests
					[_] Functional Tests
					[_] User Acceptance Tests
			[_] Python Software Testing
			[_] Margarine Software Testing
			[_] 0% Continuous Integration
				[_] 0% Software
					[_] Jenkins
		[_] Handling Failure
		[_] Modularize
		[_] Distribute and Parallelize
		[_] Agile Methodologies
		[_] 0% Using Pre-built Services and Libraries
			[_] APIs
			[_] Libraries
		[_] 0% Storing Code
			[_] git
		[_] 0% Best Practices
			[_] DRY—don't repeat yourself
		[_] 0% Design Patterns
			[_] 0% Publisher Subscriber or Consumer Producer
				[_] Gang of Four
		[_] 0% Message Queues
			[_] 0% Software
				[_] RabbitMQ
				[_] Iron.io
			[_] 0% Protocols
				[_] Stomp
				[_] AMQP
				[_] REST
		[_] 0% Datastores
			[_] How to Pick a Datastore
			[_] brewer's theorem
		[_] 0% API
			[_] Bindings
			[_] 0% Listing Items
				[_] atom feed
		[_] 0% Big Data
			[_] 0% Software
				[_] Hadoop
				[_] MongoDB
				[_] CouchDB
		[_] endpoint
		[_] 0% Security
			[_] 0% AAA
				[_] 0% authentication
					[_] API Key
				[_] authorization
		[_] 0% Quality
			[_] Gerrit
			[_] Jenkins
	[_] 0% Part 2—Operating Cloud Applications
		[_] How to Build a Cloud Application
		[_] How to Deploy a Cloud Application
		[_] How to Maintain a Cloud Application
		[_] Continuous Delivery
		[_] Continuous Deployment
		[_] AB Testing
		[_] 0% Security
			[_] bastion
		[_] 0% Infrastructure to be Controlled
			[_] Data Plane
			[_] Control Plane
			[_] Software Defined Networks
		[_] 0% Configuration Management
			[_] chef
			[_] puppet
			[_] saltstack
			[_] ansible
		[_] 0% Quality
			[_] Jenkins
		[_] 0% Cloud Interaction
			[_] 0% Bindings
				[_] libcloud
		[_] 0% Scaling in the Cloud
			[_] Vertical Scaling
			[_] Horizontal Scaling
	[_] 0% Part 3—Everything Else Cloud Applications
		[_] DevOps
	[_] Afterword
		: How this document came to be.  How the idea for this document was
		: developed.  Thanks and acknowledgments to those who were helpful during
		: the writing period.
		:
		: History of Savvy and the birth of Margarine?  Also, thanks those most
		: influential in margarine's and this document's development?
	[_] 0% Appendix
		[_] 0% Margarine Overview
			[_] Margarine Development
			[_] Margarine Releases
		[_] 0% Modules
			[_] margarine
			[_] test_margarine
	[_] 0% Glossary
		[_] fisma compliance—federal information security management act
		[_] hippa compliance—health insurance portability and accountability
		[_] open flow
		[_] open vswitch
		[_] paravirtualization
		[_] pci compliant
		[_] pv-ops
		[_] recovery oriented computing
		[_] restful api
		[_] role
		[_] saas
		[_] sdk
		[_] server
		[_] slice
		[_] swift
		[_] service
		[_] service catalog
		[_] service registry
		[_] soap api
		[_] tenant
		[_] token
		[_] trunk
		[_] trunk gating
		[_] technical debt
		[_] unit
	[_] 12% Bibliography
		[_] http://devops.rackspace.com/
		[_] http://www.rackspace.com/knowledge_center/article/rackspace-open-cloud-reference-architecture
		[_] http://www.rackspace.com/knowledge_center/
		[_] http://www.forrester.com/home
		[_] https://github.com/rackspace
		[_] http://www.slideshare.net/Rackspace
		[_] http://wiki.openstack.org/IRC
		[X] NoSQL Distilled by Martin Fowler

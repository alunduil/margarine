[_] 0% Cloud Application Architect's Handbook
	: Checkboxes being checked indicates that the content has been developed and
	: inserted into margarine's documentation.
	[_] 0% Introduction
		: The purpose and goal of this documentation
		[_] Cloud Application Architect's Handbook
		[_] Definitive guide to margarine
	[_] Epigraph
		: A phrase, quotation, or poem at the beginning of a document or
		: component.  Typically, a preface, summary, counter-example, or link to a
		: larger work or literary canon.
	[_] 0% Prologue
		: Opening story that sets the stage and gives background.  Often an
		: earlier story that ties into the story we're telling and other
		: miscellaneous but relevant information.
		[_] 0% Margarine Overview
			[_] Margarine is open to everyone's contributions.
			[_] 0% Margarine is derived from the following:
				[_] Readability
				[_] Delicious
		[_] 0% How to Contribute to Margarine
			[_] 0% Communication
				[_] 0% Mailing list: margarine-dev@googlegroups.com
					[_] Subscribe via margarine-dev+subscribe@googlegroups.com
				[_] 0% IRC: irc://irc.freenode.net#margarine
					[_] Something like http://wiki.openstack.org/UsingIRC
					[_] Sign up for freenode at http://webchat.freenode.net
			[_] 0% Basics
				[_] Create a Github Account
				[_] Fork margarine (https://github.com/raxsavvy/margarine)
				[_] Clone margarine `git clone ${URI}`
				[_] Add 'upstream' remote to your repository: `git remote add upstream https://github.com/raxsavvy/margarine.git`
			[_] 0% Work Process
				[_] 0% Branching Strategy
					[_] 0% Issues
						: When working an issue the following process should be followed:
						[_] Pick an issue from https://github.com/raxsavvy/margarine/issues
						[_] Create a branch named issues/N, where N is the number for the issue chosen
						[_] 0% Make appropriate code changes including the following concerns:
							[_] Coding Style (see margarine coding style)
							[_] Implement any appropriate tests (TDD-ISH)
						[_] Submit pull request for merge into master
						[_] If changes to pull request are required, make them in the created branch
					[_] 0% Features
						: Features that are in trello follow the following process during
						: development:
						[_] Pick a card from https://trello.com/b/kYylJGe9/margarine
						[_] Create a branch named features/category/name where category is a descriptive group of features (i.e. frontend) and name is a descriptive name for the feature (i.e. signin)
						[_] 0% Make appropriate code changes including the following concerns:
							[_] Coding Style (see margarine coding style)
							[_] Implement any appropriate tests (TDD-ISH)
						[_] Submit pull request for merge into master
						[_] If changes to pull request are required, make them in the created branch
		[_] 0% Margarine Release Process
			[_] Cycle Timing
			[_] Adapt Saltstack Release Process
		[_] Margarine URLs
		[_] % Margarine Components
			[_] Margarine Architecture
			[_] Walkthrough of each?
			[_] Major Stories?
		[_] Margarine Coding Style
	[_] 0% Part 0—Cloud Fundamentals
		[_] 0% What is Cloud?
			[_] 0% A New Infrastructure
				[_] High Availability Changes
			[_] 0% NIST
				[_] 0% Essential Characteristics
					[_] 0% On-demand Self-Service
						: A consumer can unilaterally provision computing capabilities,
						: such as server time and network storage, as needed automatically
						: without requiring human interaction with each service provider.
						[_] API
						[_] Control Panel
					[_] Broad Network Access
						: Capabilities are available over the network and accessed through
						: standard mechanisms that promote use by heterogeneous thin or
						: thick client platforms (e.g., mobile phones, tablets, laptops,
						: and workstations).
					[_] Resource Pooling
						: The provider's computing resources are pooled to serve multiple
						: consumers using a multi-tenant model, with different physical
						: and virtual resources dynamically assigned and reassigned
						: according to consumer demand.  There is a sense of location
						: independence in that the customer generally has no control or
						: knowledge over the exact location of the provided resources but
						: may be able to specify location at a higher level of abstraction
						: (e.g., country, state, or datacenter).  Examples of resources
						: include storage, processing, memory, and network bandwidth.
					[_] Rapid Elasticity
						: Capabilities can be elastically provisioned and released, in
						: some cases automatically, to scale rapidly outward and inward
						: commensurate with demand.  To the consumer, the capabilities
						: available for provisioning often appear to be unlimited and can
						: be appropriated in any quantity at any time.
					[_] Measured Service
						: Cloud systems automatically control and optimize resource use by
						: leveraging a metering capability at some level of abstraction
						: appropriate to the type of service (e.g., storage, processing,
						: bandwidth, and active user accounts).  Resource usage can be
						: monitored, controlled, and reported, providing transparency for
						: both the provider and consumer of the utilized service.
				[_] 0% Service Models
					[_] Software as a Service
					[_] Platform as a Service
					[_] Infrastructure as a Service
				[_] 0% Deployment Models
					[_] Private Cloud
					[_] Community Cloud
					[_] Public Cloud
					[_] Hybrid Cloud
		[_] 0% Virtualization
			[_] What is Virtualization?
				: Virtualization is the process by which computational resources are
				: allocated to tenants such that they can be reassigned as necessary.
				: This is the current and simplest technology for meeting the resource
				: pooling requirement of cloud computing put forth by NIST.
			[_] 0% Virtual Machine
				[_] Instance
				[_] Guest Image
				[_] Paravirtualization
				[_] Hardware Virtualization
			[_] 0% Hypervisor
				[_] 0% Management Interfaces
					[_] libvirt
					[_] xapi
				[_] 0% Xen
					[_] 0% Commercial Backing
						[_] Citrix
					[_] 0% Architecture
						[_] Dom0
						[_] DomU
						[_] Hypercalls
					[_] 0% Networking
						[_] Management: xen-vnif
						[_] 0% Networking Stack
							[_] What is this networking stack?
							[_] DVSC (Distributed Virtual Switch Controller)
							[_] Open vSwitch
				[_] KVM (Mention QEMU?)
					[_] History including QEMU roots
					[_] 0% Commercial Backing
						[_] Red Hat
					[_] 0% Architecture
						[_] virtio
					[_] 0% Networking
						[_] Management: virtio
						[_] 0% Networking Stack
							[_] What is this networking stack?
							[_] Bridged Interfaces
		[_] 0% Orchestration
			[_] What is Orchestration?
				: Orchestration is the act of managing or controlling multiple
				: hypervisors to create a dynamic infrastructure built on top of
				: classic server hardware.  Orchestration enables two other components
				: of the NIST cloud definition: rapid elasticity and possibly measured
				: service.
			[_] 0% Openstack
				[_] 0% Projects
					[_] Cells
					[_] % Cinder
						[_] % Plugins
							[_] Lunr
					[_] Flavor
					[_] Glance
					[_] Keystone
					[_] Nova
					[_] Neutron
					[_] Swift
				[_] 0% Command Line Tools
					[_] novaclient
	[_] 0% Part 1—Developing Cloud Applications
		[_] 0% How to Design a Cloud Application
		[_] 0% How to Implement a Cloud Application
			[_] Margarine Architecture
		[_] Goal: Available Application
		[_] % Discovering Requirements
			: I'm inclined to remove this exact section but keep in the idea of
			: requirements gathering.
			[_] What need does the software fill?
			[_] What business gaps are solved by the software?
			[_] What data can be shared with whom?
			[_] Proof of Concept
		[_] 0% How to Test a Cloud Application
			[_] 0% Software Testing
				[_] 0% Strategies
					[_] Black Box
					[_] White Box
					[_] Automated
					[_] Manual
				[_] 0% Methodologies
					[_] Unit Tests
					[_] Integration Tests
					[_] Functional Tests
					[_] User Acceptance Tests
			[_] Python Software Testing
			[_] Margarine Software Testing
			[_] 0% Continuous Integration
				[_] 0% Software
					[_] Jenkins
		[_] 0% Handling Failure
			[_] Fallback Handling
			[_] Fail Silently
			[_] Fail Fast
		[_] 0% Modularize
			[_] Dependency Complexity
			[_] Service Oriented Architecture
			[_] Service Registry and Directory
			[_] % Pipeline
				[_] Automobile Example
			[_] Critical Path
			[_] 0% Decoupling
				[_] Caches to Decouple
				[_] Asynchronous Programming
				[_] % Message Queues
					[_] % Communication Patterns
						[_] 1:1
						[_] 1:N
						[_] 1:ALL
				[_] 0% Factories to Decouple
					[_] Testable Javascript
		[_] % Parallelism
			: invloving the simultaneous performance of operations
			[_] MapReduce
			[_] Deadlocks
			[_] Resource Contention
			[_] Speed Increases
			[_] % Cloud infrastructure designed for parallelism
				[_] Snowflock
				[_] Moore's Law
		[_] Modular plus Parallel leads to lots of small workign units—Ants
		[_] % Frameworks
			[_] Flask
			[_] Django
		[_] Distribute and Parallelize
		[_] % Agile Methodologies
			[_] Measure Velocity
			[_] Quick to React
			[_] Cloud is Agile
			[_] Quick Change
			[_] Innovation
			[_] Scrum
			[_] Kanban
		[_] 0% Use Cases or Stories
			[_] Feature
			[_] % Stories
				[_] Sign Up (Create New User)
				[_] Submit New Article
				[_] Subscribe to Article
				[_] View an Article
			[_] Test Case(s)
			[_] Demos
			[_] Walkthroughs
		[_] 0% Using Pre-built Services and Libraries
			[_] APIs
			[_] Libraries
			[_] % Provider Partners
				[_] Rackspace Cloud Tools Marketplace
		[_] 0% Storing Code
			[_] % git
				[_] % Background
					[_] Written by Linux
					[_] % Written to be
						[_] Fast
						[_] Simple
						[_] Distributed
						[_] Assist Non-Linear Development
						[_] Large Projects
					[_] Born From Falling Out With Bitkeeper
					[_] try.github.io
			[_] % github
				[_] Found in 2008
				[_] Social Coding
				[_] Web Based Service for git Repositories
			[_] subversion
		[_] 0% Best Practices
			[_] % DRY—don't repeat yourself
				[_] Consistency of URLs (tie to REST)
				[_] Store Single Copies of Static Content
			[_] TDD—Test Driven Development
			[_] Behaviour Driven Development
			[_] KISS—Keep It Simple, Stupid
		[_] 0% Design Patterns
			[_] 0% Publisher Subscriber or Consumer Producer
				[_] Gang of Four
			[_] MVC—Model, View, Controller
		[_] 0% Message Queues
			[_] 0% Software
				[_] RabbitMQ
				[_] IronMQ
				[_] ActiveMQ
				[_] ZeroMQ
			[_] 0% Protocols
				[_] Stomp
				[_] AMQP
				[_] Beanstalkd
		[_] 0% Datastores
			[_] How to Pick a Datastore
			[_] % Distributing Data
				[_] Sharding
				[_] Replication
			[_] % Data Density
				[_] Sparse
				[_] Tightly Packed
			[_] % Types of Datastores
				[_] % NoSQL
					[_] Fowler's Background Story
					[_] % Common Characteristics
						[_] Non-relational
						[_] Distributed
						[_] Open-Source
						[_] Horizontally Scalable
						[_] Schema-less
				[_] % Relational
					[_] MySQL
					[_] Postgresql
					[_] Oracle
					[_] MSSQL
				[_] % Key-Value
					[_] Redis
					[_] Riak
					[_] Swift
				[_] % Document
					[_] MongoDB
					[_] CouchDB
				[_] % Column-Family
					[_] Cassandra
					[_] HBase
				[_] % Graph Databases
					[_] What are Graphs?
					[_] Neo4J
			[_] Mix and Match Types
			[_] 0% brewer's theorem
				: Two of Three of the following properties simultaneously for a
				: distributed data driven application.
				[_] Consistency
				[_] Availability
				[_] % Partition Tolerance
					[_] Partitions
						: Divided into parts.  In the abstract, this requires a bit more
						: precision.  A partition of a collection of items requires that
						: all of the parts have no elements in common.
			[_] % Eventual Consistency
				[_] N,W,R Relationships
			[_] Data Structure or Schema
				[_] Aggregates
				[_] Normalization
			[_] % Philosophies
				[_] ACID
				[_] BASE
			[_] Margarine's Data
				[_] Content of Articles
				[_] User Information or Profiles
				[_] Subscriptions by Users
				[_] Tags by Users
				[_] Notations for Margin Notes
		[_] 0% API
			: API, applicaiton programming interface, is a protocol intended to be
			: used as an interface by software components to communicate with one
			: another.
			[_] 0% Bindings
				: Wrapper libraries for remote invocations on other systems.  In
				: classic use bidnings are the things that hold something together.
				: In computing this has been adapted to mean holding one set of code
				: or application together with another.  The other being a service or
				: library that provides functionality desirable for the application in
				: development.
				[_] 0% SDKs
					[_] % Rackspace Cloud
						[_] % Official
							[_] pyrax
							[_] fog.io
							[_] jclouds
							[_] % Supported
								[_] sdk-support@rackspace.com
								[_] http://developer.rackspace.com
						[_] % Unofficial
							[_] libcloud
							[_] http://github.com/rackerlabs
				[_] Margarine's Bindiings
			[_] 0% Listing Items
				[_] atom feed
			[_] % RESTful API
				[_] % Components
					[_] Base URI
					[_] Media Type (MIME Type)
					[_] % Set of Operations (Four Verbs)
						[_] GET
						[_] PUT
						[_] POST
						[_] DELETE
						[_] TRACE
						[_] HEAD
				[_] RESTful Web Services from O'Reilly
				[_] % Dissertation on HTTP
					[_] http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm
				[_] Scalable
				[_] Stateless
				[_] Independence of Components
				[_] Cacheable
			[_] % SOAP API
				[_] WSDL
			[_] % Margarine's API
				[_] % Operations
					[_] CRUD for Users and Articles
				[_] cURL examples
		[_] 0% Big Data
			[_] 0% Software
				[_] Hadoop
				[_] MongoDB
				[_] CouchDB
		[_] endpoint
		[_] 0% Security
			[_] Check Every Interface
			[_] 0% AAA
				[_] 0% authentication
					[_] API Key
				[_] authorization
			[_] Accessibility
			[_] User Trust
		[_] 0% Quality
			[_] 0% Metrics—Measure Everything
				[_] Monitoring is QA
				[_] % Measure Important things
					[_] Dollars per Request
					[_] Maximize Important Aspects
			[_] Gerrit
			[_] Jenkins
			[_] % The New Bugs
				[_] Heisenbug
				[_] Mandelbug
				[_] Schrödenbug
		[_] % Frontend
			[_] Functionality
			[_] Hosting Method
			[_] % Margarine (Tinge)
				[_] SEO with Cloud Files
				[_] Cache Breaking with Cloud Files
	[_] 0% Part 2—Operating Cloud Applications
		[_] How to Build a Cloud Application
		[_] % How to Deploy a Cloud Application
			[_] A Large Group of Small Things Working in Tandem
			[_] Larger Target with Verticals
			[_] Horizontal is More Leeway against Risk
			[_] Responsive Architecture
			[_] % Where does it live?
				[_] What Cloud if Cloud?
		[_] % How to Maintain a Cloud Application
			[_] % When to Add More
				[_] % Metrics
					[_] CPU
					[_] Memory
					[_] Disk
					[_] Something Else?
		[_] Continuous Delivery
		[_] Continuous Deployment
		[_] AB Testing
		[_] Data Driven Decision Making
		[_] % Infrastructure decisions
			[_] % Workloads
				[_] Characterization
				[_] On and Off or Stepped Up and Down
				[_] Fast Growth
				[_] Variable or Continuous Up and Down
				[_] Consistent
		[_] 0% How Cloud Changes Infrastructure
			[_] Include Diagrams of Architectures
			[_] Pets vs Cattle
			[_] Continuous Growth vs Stepwise Growth
			[_] 0% Hardware Fails
				[_] Mean Time Between Failure
			[_] % Shadow IT
				[_] Faster Access
				[_] Bypass IT Controls and Policies
		[_] 0% Security
			[_] bastion
			[_] Roles
			[_] Every Layer
			[_] % Responsibilities
				[_] % Consumer of Cloud
					[_] Flavor
					[_] OS Security
					[_] Application Security
					[_] Account Management
				[_] % Provider of Cloud
					[_] Physical Security
					[_] Network Infrastructure
					[_] Virtualization Infrastructure
		[_] 0% Infrastructure to be Controlled
			[_] 0% Programming the Infrastructure
				[_] Version Controlling Infrastructure
			[_] % Software Development Practices
				[_] Agile Methodologies
				[_] Storing Infrastructure Code
			[_] Data Plane
			[_] Control Plane
			[_] 0% Software Defined Networks
				[_] Open Flow
				[_] Open vSwitch
		[_] 0% Configuration Management
			[_] Margarine Code for Configuration Management
			[_] chef
			[_] puppet
			[_] saltstack
			[_] ansible
		[_] 0% Quality
			[_] 0% Testing Infrastructure
				[_] Similar to Software Testing
			[_] Jenkins
			[_] Profiling
		[_] 0% Cloud Interaction
			[_] 0% Bindings
				[_] libcloud
		[_] 0% Scaling in the Cloud
			[_] Vertical Scaling
			[_] Horizontal Scaling
			[_] Cost Analysis of Vertical vs Horizontal Scaling
		[_] % Security
			[_] % Regulations
				[_] fisma compliance—federal information security management act
				[_] hippa compliance—health insurance portability and accountability
				[_] pci compliant
	[_] 0% Part 3—Everything Else Cloud Applications
		[_] % DevOps
			[_] Align Development and Operations
	[_] Afterword
		: How this document came to be.  How the idea for this document was
		: developed.  Thanks and acknowledgments to those who were helpful during
		: the writing period.
		:
		: History of Savvy and the birth of Margarine?  Also, thanks those most
		: influential in margarine's and this document's development?
	[_] 0% Appendix
		[_] 0% Margarine Overview
			[_] Margarine Development
			[_] Margarine Releases
		[_] 0% Modules
			[_] margarine
			[_] test_margarine
	[_] 0% Glossary
		[_] Command Line Interface
			: A means of interaction with a computer program where the user issues
			: commands to the program in the form of successive lines of text.
		[_] pv-ops
		[_] recovery oriented computing
		[_] server
		[_] service
		[_] service catalog
		[_] service registry
		[_] slice
		[_] technical debt
		[_] tenant
		[_] token
		[_] trunk
		[_] trunk gating
		[_] unit
	[_] 0% Bibliography
		[_] http://devops.rackspace.com/
		[_] http://www.rackspace.com/knowledge_center/article/rackspace-open-cloud-reference-architecture
		[_] http://www.rackspace.com/knowledge_center/
		[_] http://www.forrester.com/home
		[_] https://github.com/rackspace
		[_] http://www.slideshare.net/Rackspace
		[_] http://wiki.openstack.org/IRC
		[_] NoSQL Distilled by Martin Fowler
		[_] Continuous Delivery from Addison Wesley
